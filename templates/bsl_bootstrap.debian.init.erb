#!/bin/sh

### BEGIN INIT INFO
# Provides:          bsl_bootstrap
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: bsl_bootstrap provisioning
# Description:       Startup Puppet provisioning using bsl_puppet::setup
### END INIT INFO

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

set +e

LOGFILE='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_puppet_log') %>'
PUPPET='<%= scope.lookupvar('bsl_bootstrap::puppet_binary') %>'
TARGET_CERTNAME='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::target_certname') %>'

do_start () {
  msg="## BSL_BOOTSTRAP STARTUP PROVISIONING BEGINS via ${PUPPET} @ $(date)"

  [ "$LOGFILE" != "syslog" ] && [ "$LOGFILE" != "console" ] && echo $msg >> $LOGFILE
  log_begin_msg $msg

  apt-get update -qy

  ssl_dir=$(puppet config print ssldir)
  certname=$(puppet config print certname)

  <%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_facter_vars') -%> $PUPPET apply \
    <%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_puppet_args') %> \
    --certname=$TARGET_CERTNAME \
    --environment='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::environment') %>' \
    --logdest=$LOGFILE \
    -e 'class { '\''<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::bootstrap_classname') %>'\'': }'
  retval=$?

  new_certname=$(puppet config print certname)

  if [ $retval -eq 0 ]; then
    msg="## BSL_BOOTSTRAP PUPPET RUN ALL DONE ($retval) @ $(date)"
  else
    msg="## BSL_BOOTSTRAP PUPPET RUN FAILED ($retval) @ $(date)"
  fi
  [ "$LOGFILE" != "syslog" ] && [ "$LOGFILE" != "console" ] && echo $msg >> $LOGFILE
  [ "$VERBOSE" != no ] && log_daemon_msg $msg

  chown -R puppet:puppet /opt/puppetlabs/puppet/cache

  log_end_msg $retval
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  *)
    echo "Usage: $0 {start}" >&2
    exit 1
  ;;
esac
