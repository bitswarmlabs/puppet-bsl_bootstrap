#!/bin/sh

### BEGIN INIT INFO
# Provides:          bsl_bootstrap
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: bsl_bootstrap provisioning
# Description:       Startup Puppet provisioning using bsl_puppet::setup
### END INIT INFO

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

set +e

LOGFILE='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_puppet_log') %>'
PUPPET='<%= scope.lookupvar('bsl_bootstrap::puppet_binary') %>'
TARGET_CERTNAME='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::target_certname') %>'

do_start () {
  msg="## BSL_BOOTSTRAP STARTUP PROVISIONING BEGINS via ${PUPPET} @ $(date) target_certname=${TARGET_CERTNAME}"
  [ "$LOGFILE" != "syslog" ] && [ "$LOGFILE" != "console" ] && echo $msg >> $LOGFILE
  log_begin_msg $msg

  apt-get update -qy

  ssl_dir=$(puppet config print ssldir)

  certfile="${ssl_dir}/certs/${TARGET_CERTNAME}.pem"

  if [ ! -f $certfile ]; then
    msg="## BSL_BOOTSTRAP RUNNING '${PUPPET} agent -t' to regenerate certs"
    [ "$LOGFILE" != "syslog" ] && [ "$LOGFILE" != "console" ] && echo $msg >> $LOGFILE
    [ "$VERBOSE" != no ] && log_daemon_msg $msg

    $PUPPET agent -t -v --certname=$TARGET_CERTNAME >> $LOGFILE
    agent_retval=$?

    $PUPPET cert sign -v --allow-dns-alt-names $TARGET_CERTNAME >> $LOGILE
    cert_retval=$?
  else
    agent_retval=0
    cert_retval=0

    msg="## BSL_BOOTSTRAP Skipped running '${PUPPET} agent -t' to regenerate certs- $certfile exists"
    [ "$LOGFILE" != "syslog" ] && [ "$LOGFILE" != "console" ] && echo $msg >> $LOGFILE
    [ "$VERBOSE" != no ] && log_daemon_msg $msg
  fi

  <%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_facter_vars') -%> $PUPPET apply \
    <%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_puppet_args') %> \
    --hiera_config=/etc/puppetlabs/code/bsl_bootstrap/hiera.yaml \
    --certname=$TARGET_CERTNAME \
    --environment='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::environment') %>' \
    --logdest=$LOGFILE \
    -e 'class { '\''<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::bootstrap_classname') %>'\'': }'
  retval=$?

  for f in $(find /opt/puppetlabs/bin -type l -or -type f); do
    ln -sf $(readlink -f "$f") /usr/bin/$(basename "$f")
  done

  if [ $retval -eq 0 ] && [ $agent_retval -eq 0 ]; then
    msg="## BSL_BOOTSTRAP PUPPET RUN ALL DONE (success) @ $(date)"
  else
    msg="## BSL_BOOTSTRAP PUPPET RUN FAILED (${retval}/${agent_retval}) @ $(date)"
  fi
  [ "$LOGFILE" != "syslog" ] && [ "$LOGFILE" != "console" ] && echo $msg >> $LOGFILE
  [ "$VERBOSE" != no ] && log_daemon_msg $msg

  log_end_msg $retval
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  *)
    echo "Usage: $0 {start}" >&2
    exit 1
  ;;
esac
