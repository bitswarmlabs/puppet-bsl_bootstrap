#!/bin/bash

### BEGIN INIT INFO
# Provides:          bsl-bootstrap-final
# Required-Start:    $all
# Required-Stop:
# Should-Start:      bsl-bootstrap-init cloud-final
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: bsl_bootstrap final provisioning
# Description:       Final startup Puppetmaster provisioning using bsl_bootstrap
### END INIT INFO

set -o pipefail

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

LOGFILE='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_puppet_log') %>'
PUPPET='<%= scope.lookupvar('bsl_bootstrap::puppet_binary') %>'
PUPPET_LOGDEST='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_puppet_logger') %>'
PUPPET_ENVIRONMENT='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::environment') %>'
TARGET_CERTNAME='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::target_certname') %>'

do_start () {
  declare -i final_result=0
  declare -i retval=0

  log_begin_msg "BSL_BOOTSTRAP STARTUP FINAL BEGINS via ${PUPPET} target_certname=${TARGET_CERTNAME}" && log_end_msg 0
  echo "# BSL_BOOTSTRAP STARTUP FINAL BEGINS via ${PUPPET} @ $(date) target_certname=${TARGET_CERTNAME}" >> $LOGFILE

  ssl_dir=$(puppet config print ssldir)
  certfile="${ssl_dir}/certs/${TARGET_CERTNAME}.pem"
  certname=$(puppet config print certname --environment='<%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::environment') %>')

  echo "## ssl_dir: $ssl_dir" >> $LOGFILE
  echo "## certname: $certname" >> $LOGFILE

  log_begin_msg 'Final bootstrap provisioning begins'
  echo "
## Final bootstrap provisioning begins via puppet apply certname=${TARGET_CERTNAME} environment=${PUPPET_ENVIRONMENT}" >> $LOGFILE

  set -x
  <%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_facter_vars') -%> FACTER_bootstrapping=true \
    $PUPPET apply \
    --test \
    --hiera_config=/etc/puppetlabs/code/bsl_bootstrap/hiera.yaml \
    --certname=$TARGET_CERTNAME \
    --environment=$PUPPET_ENVIRONMENT \
    --logdest=$PUPPET_LOGDEST \
    -e 'class { '\''bsl_bootstrap::puppetmaster::setup'\'': }' \
    2>&1 | tee -a $LOGFILE
  retval=$?
  set +x

  if [ $retval -ne 1 ]; then
    log_success_msg "success!"
    echo "## ... success!!" >> $LOGFILE
    log_end_msg 0
  else
    log_failure_msg "failed ($retval)"
    echo "## puppet non-zero return ($retval)" >> $LOGFILE
    final_result+=$retval
    log_end_msg $retval
  fi

  new_certname=$(puppet config print certname --environment=$PUPPET_ENVIRONMENT)
  echo "## new certname: $new_certname" >> $LOGFILE

  echo "## creating symlinks from /opt/puppetlabs/bin to /usr/bin" >> $LOGFILE
  for f in $(find /opt/puppetlabs/bin -type l -or -type f); do
    echo " - $(ln -svf $(readlink -f "$f") /usr/bin/$(basename "$f"))" >> $LOGFILE 2>&1
  done

  echo "## Resetting ownership of /opt/puppetlabs/puppet/cache"
  [ -e /opt/puppetlabs/puppet/cache ] && chown -c -R puppet:puppet /opt/puppetlabs/puppet/cache 2>&1 | tee -a $LOGFILE

  log_begin_msg "Attempting puppet agent -t"
  echo "
## Attempting puppet agent -t run" >> $LOGFILE

  set -x
  <%= scope.lookupvar('bsl_bootstrap::puppetmaster::config::init_service_facter_vars') -%> FACTER_bootstrapping=true \
    $PUPPET agent \
    --test 2>&1 | tee -a $LOGFILE
  retval=$?
  set +x

  echo "## Resetting ownership of /opt/puppetlabs/puppet/cache #2"
  [ -e /opt/puppetlabs/puppet/cache ] && chown -c -R puppet:puppet /opt/puppetlabs/puppet/cache 2>&1 | tee -a $LOGFILE

  if [ $retval -ne 1 ]; then
    log_success_msg "success, calling for reboot"
    echo "## ... success, calling for reboot" >> $LOGFILE
    log_end_msg 0
  else
    log_warning_msg "failed, rebooting to try again" $retval
    echo "## puppet agent non-zero return warning ($retval), rebooting to try again" >> $LOGFILE
    log_end_msg $retval
  fi

  if [ -e /etc/puppetlabs/code/bsl_bootstrap/bsl-bootstrap-final-was-here ];
    echo "## already rebooted in past, ignoring now" >> $LOGFILE
  else
    shutdown -r 1 2>&1 | tee -a $LOGFILE
    if [ $? -eq 0 ]; then
      echo "$(date)" > /etc/puppetlabs/code/bsl_bootstrap/bsl-bootstrap-final-was-here
    fi
  fi

  log_begin_msg "Provisioning"
  if [ $final_result -eq 0 ]; then
    log_success_msg "successful"
    log_end_msg 0
    echo "# BSL_BOOTSTRAP (FINAL) TOTAL SUCCESS @ $(date)
" >> $LOGFILE
  else
    log_failure_msg "failed"
    log_end_msg 1
    echo "# BSL_BOOTSTRAP (FINAL) FAIL (${final_result}) @ $(date)
" >> $LOGFILE
  fi

  exit $final_result
}

case "$1" in
  start)
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  *)
    echo "Usage: $0 {start}" >&2
    exit 1
  ;;
esac
